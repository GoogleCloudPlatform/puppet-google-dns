# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'google/dns/network/delete'
require 'google/dns/network/get'
require 'google/dns/network/post'
require 'google/dns/network/put'
require 'google/dns/property/enum'
require 'google/dns/property/integer'
require 'google/dns/property/managedzone_name'
require 'google/dns/property/string'
require 'google/dns/property/string_array'
require 'google/hash_utils'
require 'puppet'

Puppet::Type.type(:gdns_resource_record_set).provide(:google) do
  mk_resource_methods

  def self.instances
    debug('instances')
    raise [
      '"puppet resource" is not supported at the moment:',
      'TODO(nelsonjr): https://goto.google.com/graphite-bugs-view?id=167'
    ].join(' ')
  end

  def self.prefetch(resources)
    debug('prefetch')
    resources.each do |name, resource|
      project = resource[:project]
      debug("prefetch #{name}") if project.nil?
      debug("prefetch #{name} @ #{project}") unless project.nil?
      fetch = fetch_wrapped_resource(resource,
                                     'dns#resourceRecordSet',
                                     'dns#resourceRecordSetsListResponse',
                                     'rrsets')
      resource.provider = present(name, fetch) unless fetch.nil?
    end
  end

  def self.present(name, fetch)
    result = new({ title: name, ensure: :present }.merge(fetch_to_hash(fetch)))
    result.instance_variable_set(:@fetched, fetch)
    result
  end

  def self.fetch_to_hash(fetch)
    {
      name: Google::Dns::Property::String.api_munge(fetch['name']),
      type: Google::Dns::Property::Enum.api_munge(fetch['type']),
      ttl: Google::Dns::Property::Integer.api_munge(fetch['ttl']),
      target: Google::Dns::Property::StringArray.api_munge(fetch['rrdatas'])
    }.reject { |_, v| v.nil? }
  end

  def exists?
    debug("exists? #{@property_hash[:ensure] == :present}")
    @property_hash[:ensure] == :present
  end

  def create
    debug('create')
    @created = true
    change = create_change nil, updated_record, @resource
    change_id = change['id'].to_i
    debug("created for transaction '#{change_id}' to complete")
    wait_for_change_to_complete change_id, @resource \
      if change['status'] == 'pending'
    @property_hash[:ensure] = :present
  end

  def destroy
    debug('destroy')
    @deleted = true
    change = create_change @fetched, nil, @resource
    change_id = change['id'].to_i
    debug("created for transaction '#{change_id}' to complete")
    wait_for_change_to_complete change_id, @resource \
      if change['status'] == 'pending'
    @property_hash[:ensure] = :absent
  end

  def flush
    debug('flush')
    # return on !@dirty is for aiding testing (puppet already guarantees that)
    return if @created || @deleted || !@dirty
    change = create_change @fetched, updated_record, @resource
    change_id = change['id'].to_i
    debug("created for transaction '#{change_id}' to complete")
    wait_for_change_to_complete change_id, @resource \
      if change['status'] == 'pending'
  end

  def dirty(field, from, to)
    @dirty = {} if @dirty.nil?
    @dirty[field] = {
      from: from,
      to: to
    }
  end

  private

  def self.resource_to_hash(resource)
    {
      project: resource[:project],
      name: resource[:name],
      kind: 'dns#resourceRecordSet',
      type: resource[:type],
      ttl: resource[:ttl],
      target: resource[:target],
      managed_zone: resource[:managed_zone]
    }.reject { |_, v| v.nil? }
  end

  def fetch_auth(resource)
    self.class.fetch_auth(resource)
  end

  def self.fetch_auth(resource)
    Puppet::Type.type(:gauth_credential).fetch(resource)
  end

  def debug(message)
    puts("DEBUG: #{message}") if ENV['PUPPET_HTTP_VERBOSE']
    super(message)
  end

  def self.collection(data, extra = '', extra_data = {})
    URI.join(
      'https://www.googleapis.com/dns/v1/',
      expand_variables(
        [
          'projects/{{project}}/managedZones/{{managed_zone}}/changes',
          extra
        ].join,
        data, extra_data
      )
    )
  end

  def collection(data, extra = '', extra_data = {})
    self.class.collection(data, extra, extra_data)
  end

  def self.self_link(data)
    URI.join(
      'https://www.googleapis.com/dns/v1/',
      expand_variables(
        [
          'projects/{{project}}/managedZones/{{managed_zone}}/rrsets',
          '?name={{name}}&type={{type}}'
        ].join,
        data
      )
    )
  end

  def self_link(data)
    self.class.self_link(data)
  end

  # rubocop:disable Metrics/CyclomaticComplexity
  def self.return_if_object(response, kind)
    raise "Bad response: #{response.body}" \
      if response.is_a?(Net::HTTPBadRequest)
    raise "Bad response: #{response}" \
      unless response.is_a?(Net::HTTPResponse)
    return if response.is_a?(Net::HTTPNotFound)
    return if response.is_a?(Net::HTTPNoContent)
    result = JSON.parse(response.body)
    raise_if_errors result, %w[error errors], 'message'
    raise "Bad response: #{response}" unless response.is_a?(Net::HTTPOK)
    raise "Incorrect result: #{result['kind']} (expected '#{kind}')" \
      unless result['kind'] == kind
    result
  end
  # rubocop:enable Metrics/CyclomaticComplexity

  def return_if_object(response, kind)
    self.class.return_if_object(response, kind)
  end

  def self.extract_variables(template)
    template.scan(/{{[^}]*}}/).map { |v| v.gsub(/{{([^}]*)}}/, '\1') }
            .map(&:to_sym)
  end

  def self.expand_variables(template, var_data, extra_data = {})
    data = if var_data.class <= Hash
             var_data.merge(extra_data)
           else
             resource_to_hash(var_data).merge(extra_data)
           end
    extract_variables(template).each do |v|
      unless data.key?(v)
        raise "Missing variable :#{v} in #{data} on #{caller.join("\n")}}"
      end
      template.gsub!(/{{#{v}}}/, CGI.escape(data[v].to_s))
    end
    template
  end

  def updated_record
    {
      kind: 'dns#resourceRecordSet',
      name: @resource[:name],
      type: @resource[:type],
      ttl: @resource[:ttl].nil? ? 900 : @resource[:ttl],
      rrdatas: @resource[:target]
    }
  end

  def unwrap_resource(result, resource)
    self.class.unwrap_resource(result, resource)
  end

  def self.unwrap_resource(result, _resource)
    # DNS service already did server-side filtering.
    result.first
  end

  def prefetch_soa_resource
    resource = {
      type: 'SOA',
      name: "#{name.split('.').drop(1).join('.')}.",
      managed_zone: @resource[:managed_zone],
      project: @resource[:project],
      credential: @resource[:credential]
    }
    result = fetch_wrapped_resource(resource, 'dns#resourceRecordSet',
                                    'dns#resourceRecordSetsListResponse',
                                    'rrsets')
    if result.nil?
      raise ['Google DNS Managed Zone ', "'#{managed_zone}'",
             'not present in the manifest file'].join(' ')
    end
    result
  end

  def create_change(original, updated, resource)
    create_req = ::Google::Dns::Network::Post.new(
      collection(resource), fetch_auth(resource),
      'application/json', resource_to_change_request(original, updated)
    )
    return_if_change_object create_req.send
  end

  # Fetch current SOA. We need the last SOA so we can increment its serial
  def update_soa
    original_soa = prefetch_soa_resource

    # Create a clone of the SOA record so we can update it
    updated_soa = original_soa.clone
    updated_soa.each_key do |k|
      updated_soa[k] = original_soa[k].clone \
        unless original_soa[k].is_a?(Integer)
    end

    soa_parts = updated_soa['rrdatas'][0].split(' ')
    soa_parts[2] = soa_parts[2].to_i + 1
    updated_soa['rrdatas'][0] = soa_parts.join(' ')
    [original_soa, updated_soa]
  end

  def resource_to_change_request(original_record, updated_record)
    original_soa, updated_soa = update_soa
    result = new_change_request
    add_additions result, updated_soa, updated_record
    add_deletions result, original_soa, original_record
    ::Google::HashUtils.camelize_keys(result).to_json
  end

  def add_additions(result, updated_soa, updated_record)
    result[:additions] << updated_soa unless updated_soa.nil?
    result[:additions] << updated_record unless updated_record.nil?
  end

  def add_deletions(result, original_soa, original_record)
    result[:deletions] << original_soa unless original_soa.nil?
    result[:deletions] << original_record unless original_record.nil?
  end

  # TODO(nelsonjr): Merge and delete this code once async operations
  # declared in api.yaml is moved to master from:
  #   https://cloud-internal.googlesource.com/cloud-graphite-team/
  #   config-modules/codegen/+/
  #   2ccb0eb5cb207f67b297c6058d2455240d7316bf/
  #   compute/api.yaml#9
  def wait_for_change_to_complete(change_id, resource)
    status = 'pending'
    while status == 'pending'
      debug("waiting for transaction '#{change_id}' to complete")
      status = get_change_status(change_id, resource)
      sleep(0.5) unless status == 'done'
    end
    debug("transaction '#{change_id}' complete")
  end

  def get_change_status(change_id, resource)
    change_req = ::Google::Dns::Network::Get.new(
      collection(resource, '/{{id}}', id: change_id), fetch_auth(resource)
    )
    return_if_change_object(change_req.send)['status']
  end

  def new_change_request
    {
      kind: 'dns#change',
      additions: [],
      deletions: [],
      start_time: Time.now.iso8601
    }
  end

  def return_if_change_object(response)
    raise "Bad request: #{response.body}" \
      if response.is_a?(Net::HTTPBadRequest)
    raise "Bad response: #{response}" \
      unless response.is_a?(Net::HTTPResponse)
    return unless response.class >= Net::HTTPOK
    result = JSON.parse(response.body)
    raise "Incorrect result: #{result['kind']}" \
      unless result['kind'] == 'dns#change'
    result
  end

  def fetch_resource(resource, self_link, kind)
    self.class.fetch_resource(resource, self_link, kind)
  end

  def self.fetch_resource(resource, self_link, kind)
    get_request = ::Google::Dns::Network::Get.new(
      self_link, fetch_auth(resource)
    )
    return_if_object get_request.send, kind
  end

  def fetch_wrapped_resource(resource, kind, wrap_kind, wrap_path)
    self.class.fetch_wrapped_resource(resource, kind, wrap_kind, wrap_path)
  end

  def self.fetch_wrapped_resource(resource, kind, wrap_kind, wrap_path)
    result = fetch_resource(resource, self_link(resource), wrap_kind)
    return if result.nil? || !result.key?(wrap_path)
    result = unwrap_resource(result[wrap_path], resource)
    return if result.nil?
    raise "Incorrect result: #{result['kind']} (expected #{kind})" \
      unless result['kind'] == kind
    result
  end

  def self.raise_if_errors(response, err_path, msg_field)
    errors = ::Google::HashUtils.navigate(response, err_path)
    raise_error(errors, msg_field) unless errors.nil?
  end

  def self.raise_error(errors, msg_field)
    raise IOError, ['Operation failed:',
                    errors.map { |e| e[msg_field] }.join(', ')].join(' ')
  end
end
